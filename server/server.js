const express = require('express');
const mongoose = require('mongoose');
const path = require('path');
const fs = require('fs');
const cors = require('cors');
const helmet = require('helmet');
const compression = require('compression');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 10000;

// ๐ ุชุดุฎูุต ุงููุชุบูุฑุงุช ุงูุจูุฆูุฉ
console.log('๐ ูุญุต ุงููุชุบูุฑุงุช ุงูุจูุฆูุฉ:');
console.log('PORT:', process.env.PORT);
console.log('MONGODB_URI ููุฌูุฏ:', !!process.env.MONGODB_URI);

// ๐ก๏ธ ุฅุนุฏุงุฏุงุช ุงูุฃูุงู ูุงูุฃุฏุงุก
app.use(helmet());
app.use(compression());
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// ๐ ุฎุฏูุฉ ุงููููุงุช ุงูุซุงุจุชุฉ
app.use(express.static(__dirname));

// ๐๏ธ ุงุชุตุงู ูุงุนุฏุฉ ุงูุจูุงูุงุช
const connectDB = async () => {
    try {
        console.log('๐ ูุญุงููุฉ ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช...');
        
        await mongoose.connect(process.env.MONGODB_URI, {
            useNewUrlParser: true,
            useUnifiedTopology: true,
        });
        console.log('โ ุชู ุงูุงุชุตุงู ุจูุงุนุฏุฉ MongoDB ุจูุฌุงุญ');
    } catch (error) {
        console.error('โ ุฎุทุฃ ูู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช:', error.message);
        process.exit(1);
    }
};

// ๐๏ธ ููุงุฐุฌ ุงูุจูุงูุงุช
const CardSetSchema = new mongoose.Schema({
    name: { type: String, required: true },
    cards: { type: Array, required: true },
    knownCards: { type: Array, default: [] },
    reviewCards: { type: Array, default: [] },
    createdAt: { type: Date, default: Date.now }
});

const CardSet = mongoose.model('CardSet', CardSetSchema);

// ๐ routes - ุงูุตูุญุฉ ุงูุฑุฆูุณูุฉ
app.get('/', (req, res) => {
    const possiblePaths = [
        path.join(__dirname, 'Index.html'),
        path.join(__dirname, '../Index.html'),
        path.join(__dirname, 'index.html'),
        path.resolve(__dirname, 'Index.html')
    ];

    console.log('๐ ุฌุงุฑู ุงูุจุญุซ ุนู Index.html ูู ุงููุณุงุฑุงุช:');

    let foundPath = null;
    for (const filePath of possiblePaths) {
        console.log('๐ ููุญุต:', filePath);
        if (fs.existsSync(filePath)) {
            foundPath = filePath;
            console.log('โ ูุฌุฏูุง ุงูููู ูู:', foundPath);
            break;
        }
    }

    if (foundPath) {
        res.sendFile(foundPath);
    } else {
        console.error('โ Index.html ุบูุฑ ููุฌูุฏ ูู ุฃู ูู ุงููุณุงุฑุงุช ุงูุชุงููุฉ:');
        possiblePaths.forEach(p => console.log('   โ', p));
        res.status(500).json({
            error: "ุงูููู ุงูุฑุฆูุณู ุบูุฑ ููุฌูุฏ",
            possiblePaths: possiblePaths
        });
    }
});

// ๐ API routes ูุญูุธ ูุงุณุชุฑุฌุงุน ุงููุฌููุนุงุช
app.post('/api/sets/save-set', async (req, res) => {
    try {
        const { name, cards, knownCards, reviewCards } = req.body;
        
        const newSet = new CardSet({
            name,
            cards,
            knownCards: knownCards || [],
            reviewCards: reviewCards || []
        });

        await newSet.save();
        
        res.json({ 
            success: true, 
            message: 'ุชู ุญูุธ ุงููุฌููุนุฉ ุจูุฌุงุญ',
            setId: newSet._id 
        });
    } catch (error) {
        console.error('Error saving set:', error);
        res.status(500).json({ 
            success: false, 
            message: 'ูุดู ูู ุญูุธ ุงููุฌููุนุฉ' 
        });
    }
});

app.get('/api/sets', async (req, res) => {
    try {
        const sets = await CardSet.find().sort({ createdAt: -1 });
        res.json(sets);
    } catch (error) {
        console.error('Error fetching sets:', error);
        res.status(500).json({ 
            success: false, 
            message: 'ูุดู ูู ุชุญููู ุงููุฌููุนุงุช' 
        });
    }
});

app.get('/api/sets/:setId', async (req, res) => {
    try {
        const setId = req.params.setId;
        const set = await CardSet.findById(setId);
        
        if (!set) {
            return res.status(404).json({ 
                success: false, 
                message: 'ุงููุฌููุนุฉ ุบูุฑ ููุฌูุฏุฉ' 
            });
        }

        res.json(set);
    } catch (error) {
        console.error('Error fetching set:', error);
        res.status(500).json({ 
            success: false, 
            message: 'ูุดู ูู ุชุญููู ุงููุฌููุนุฉ' 
        });
    }
});

// ูุนุงูุฌุฉ ุฌููุน ุงููุณุงุฑุงุช ุบูุฑ ุงููุนุฑููุฉ
app.get('*', (req, res) => {
    res.sendFile(path.join(__dirname, 'Index.html'));
});

// ๐ ุชุดุบูู ุงูุฎุงุฏู
const startServer = async () => {
    try {
        await connectDB();
        app.listen(PORT, () => {
            console.log(`โ ุงูุฎุงุฏู ูุนูู ุนูู ุงูุจูุฑุช: ${PORT}`);
            console.log(`๐ ุงูุฑุงุจุท: http://localhost:${PORT}`);
            console.log(`๐๏ธ  ุญุงูุฉ ูุงุนุฏุฉ ุงูุจูุงูุงุช: ${mongoose.connection.readyState === 1 ? 'ูุชุตู' : 'ุบูุฑ ูุชุตู'}`);
        });
    } catch (error) {
        console.error('โ ูุดู ูู ุชุดุบูู ุงูุฎุงุฏู:', error);
        process.exit(1);
    }
};

startServer();
